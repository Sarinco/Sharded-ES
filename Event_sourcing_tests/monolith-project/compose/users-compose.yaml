services:
  users:
    build:
      context: ../src/back-end/users
      dockerfile: Dockerfile
    volumes:
      - ../src/back-end/users:/app
      - ../utils/types:/app/src/types
      - ../utils/handlers:/app/src/handlers
      - ../utils/middleware:/app/src/middleware # ONLY ONE TO NEED ALL FOLDER
    ports:
      - "${USER_EXTERNAL_PORT}:${USER_PORT}"
    # The watch command will check for changes in the code and restart the server
    command: sh -c "npm install && npm run watch" 
    environment:
      PORT: ${USER_PORT} 
      DB_ADDRESS: ${DB_USER_HOST}
      DB_PORT: ${DB_USER_PORT}
      PROXY_ADDRESS: ${PROXY_HOST}
      PROXY_PORT: ${PROXY_PORT}
      EVENT_ADDRESS: ${EVENT_HOST} 
      EVENT_PORT: ${EVENT_PORT} 
      JWT_SECRET: ${JWT_SECRET}
      EVENT_CLIENT_ID: "user-service"
    depends_on:
      broker:
        condition: service_healthy
      db-users:
        condition: service_healthy
      db-users-init:
        condition: service_completed_successfully
  db-users-init:
    build:
      context: ../src/back-end/users
      dockerfile: Dockerfile.init-db
    volumes:
      - ../src/back-end/users:/app
      - ../utils/types:/app/src/types
      - ../utils/handlers:/app/src/handlers
      - ../utils/middleware:/app/src/middleware # ONLY ONE TO NEED ALL FOLDER
    environment:
      PORT: ${USER_PORT}
      EVENT_ADDRESS: ${EVENT_HOST}
      EVENT_PORT: ${EVENT_PORT}
      JWT_SECRET: ${JWT_SECRET}
      EVENT_CLIENT_ID: "user-service"
    depends_on:
      broker:
        condition: service_healthy
      db-users:
        condition: service_healthy

  db-users:
    image: redis:alpine
    ports:
      - "${DB_USER_EXTERNAL_PORT}:${DB_USER_PORT}"
    volumes:
      - ../src/back-end/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 1s
      timeout: 3s
      retries: 5
