services:
  stock:
    build:
      context: ./src/back-end/stock
      dockerfile: Dockerfile
    volumes:
      - ./src/back-end/stock:/app
      - ./utils/types:/app/src/types
      - ./utils/handlers:/app/src/handlers
      #- ./utils/middleware/token.ts:/app/src/middleware/token.ts
      - ./utils/middleware:/app/src/middleware # ONLY ONE TO NEED ALL FOLDER
    ports:
      - "5000:5000"
    # The watch command will check for changes in the code and restart the server
    command: sh boot-in-order.sh 
    environment:
      PORT: ${STOCK_PORT} 
      DB_ADDRESS: ${DB_STOCK_HOST}
      DB_KEYSPACE: ${DB_STOCK_KEYSPACE} 
      EVENT_ADDRESS: ${EVENT_HOST} 
      EVENT_PORT: ${EVENT_PORT} 
      JWT_SECRET: ${JWT_SECRET}
    depends_on:
      broker:
        condition: service_healthy
      db-stock:
        condition: service_healthy
      db-stock-init:
        condition: service_completed_successfully
  db-stock-init:
    build:
      context: ./src/back-end/stock
      dockerfile: Dockerfile.init-db
    volumes:
      - ./src/back-end/stock:/app
      - ./utils/types:/app/src/types
      - ./utils/handlers:/app/src/handlers
      - ./utils/middleware:/app/src/middleware # ONLY ONE TO NEED ALL FOLDER
    environment:
      PORT: ${STOCK_PORT}
      EVENT_ADDRESS: ${EVENT_HOST}
      EVENT_PORT: ${EVENT_PORT}
      JWT_SECRET: ${JWT_SECRET}
    depends_on:
      broker:
        condition: service_healthy
      db-stock:
        condition: service_healthy

  db-stock:
    image: redis:alpine
    ports:
      - "${DB_STOCK_PORT}:6379"
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 1s
      timeout: 3s
      retries: 5
